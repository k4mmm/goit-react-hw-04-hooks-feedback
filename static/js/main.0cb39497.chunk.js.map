{"version":3,"sources":["App.styled.jsx","components/FeedbackOptions/FeedbackOptions.styled.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Notification/Notification.styled.jsx","components/Notification/Notification.jsx","components/Statistics/Statistics.styled.jsx","components/Statistics/Statistics.jsx","components/Section/Section.styled.jsx","components/Section/Section.jsx","App.jsx","index.js"],"names":["FeedbackSection","styled","div","Button","button","FeedbackOptions","options","onLeaveFeedback","map","option","type","onClick","Message","p","Notification","message","Stats","StatItem","Statistics","good","neutral","bad","total","positivePercentage","Container","section","Title","h2","Section","title","children","App","useState","setGood","setNeutral","setBad","btns","countTotalFeedback","Object","keys","name","ps","Math","round","countPositiveFeedbackPercentage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAEaA,EAAkBC,IAAOC,IAAV,0BCAfC,EAASF,IAAOG,OAAV,mD,OCCNC,EAAkB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBACzC,OACE,mCACGD,EAAQE,KAAI,SAACC,GAAD,OACX,cAACN,EAAD,CACEO,KAAK,SACLD,OAAQA,EAERE,QAAS,kBAAMJ,EAAgBE,IAJjC,SAMGA,GAHIA,SCRFG,EAAUX,IAAOY,EAAV,0BCCPC,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC7B,OAAO,cAACH,EAAD,UAAUG,KCFNC,EAAQf,IAAOC,IAAV,0BACLe,EAAWhB,IAAOY,EAAV,0BCDRK,EAAa,SAAC,GAMpB,IALLC,EAKI,EALJA,KACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,IACAC,EAEI,EAFJA,MACAC,EACI,EADJA,mBAEA,OACE,eAACP,EAAD,WACE,eAACC,EAAD,oBAAiBE,KACjB,eAACF,EAAD,uBAAoBG,KACpB,eAACH,EAAD,mBAAgBI,KAChB,eAACJ,EAAD,qBAAkBK,KAClB,eAACL,EAAD,iCAA8BM,EAA9B,WCbOC,EAAYvB,IAAOwB,QAAV,0BAETC,EAAQzB,IAAO0B,GAAV,0BCFLC,EAAU,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC/B,OACE,eAACN,EAAD,WACE,cAACE,EAAD,UAAQG,IACPC,MCCQ,SAASC,IACtB,MAAwBC,mBAAS,GAAjC,mBAAOb,EAAP,KAAac,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOZ,EAAP,KAAgBc,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOX,EAAP,KAAYc,EAAZ,KACMC,EAAO,CAAEf,MAAKD,UAASD,QAmBvBkB,EAAqB,WACzB,OAAOlB,EAAOE,EAAMD,GAQtB,OACE,eAACpB,EAAD,WACE,cAAC,EAAD,CAAS6B,MAAM,wBAAf,SACE,cAAC,EAAD,CACEvB,QAASgC,OAAOC,KAAKH,GACrB7B,gBA/BU,SAACiC,GACjB,OAAQA,GACN,IAAK,OACHP,GAAQ,SAACQ,GAAD,OAAQA,EAAK,KACrB,MACF,IAAK,MACHN,GAAO,SAACM,GAAD,OAAQA,EAAK,KACpB,MACF,IAAK,UACHP,GAAW,SAACO,GAAD,OAAQA,EAAK,KACxB,MAEF,QACE,aAqBF,cAAC,EAAD,CAASZ,MAAM,aAAf,SACGQ,IACC,cAAC,EAAD,CACElB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOe,IACPd,mBApB8B,WACtC,IAAMD,EAAQe,IACd,OAAOK,KAAKC,MAAc,IAAPxB,EAAcG,GAkBLsB,KAGtB,cAAC,EAAD,CAAc7B,QAAQ,2BCpDhC8B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.0cb39497.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const FeedbackSection = styled.div``;\n","import styled from \"@emotion/styled\";\n\nexport const Button = styled.button`\n  margin-right: 10px;\n`;\n","import PropTypes from \"prop-types\";\nimport { Button } from \"./FeedbackOptions.styled\";\n\nexport const FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <>\n      {options.map((option) => (\n        <Button\n          type=\"button\"\n          option={option}\n          key={option}\n          onClick={() => onLeaveFeedback(option)}\n        >\n          {option}\n        </Button>\n      ))}\n    </>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.array,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n","import styled from \"@emotion/styled\";\n\nexport const Message = styled.p``;\n","import PropTypes from \"prop-types\";\nimport { Message } from \"./Notification.styled\";\n\nexport const Notification = ({ message }) => {\n  return <Message>{message}</Message>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import styled from \"@emotion/styled\";\n\nexport const Stats = styled.div``;\nexport const StatItem = styled.p``;\n","import { StatItem, Stats } from \"./Statistics.styled\";\nimport PropTypes from \"prop-types\";\nexport const Statistics = ({\n  good,\n  neutral,\n  bad,\n  total,\n  positivePercentage,\n}) => {\n  return (\n    <Stats>\n      <StatItem>Good: {good}</StatItem>\n      <StatItem>Neutral :{neutral}</StatItem>\n      <StatItem>Bad: {bad}</StatItem>\n      <StatItem>Total: {total}</StatItem>\n      <StatItem>Positive feedback: {positivePercentage}%</StatItem>\n    </Stats>\n  );\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n","import styled from \"@emotion/styled\";\n\nexport const Container = styled.section``;\n\nexport const Title = styled.h2``;\n","import { Title, Container } from \"./Section.styled\";\nimport PropTypes from \"prop-types\";\nexport const Section = ({ title, children }) => {\n  return (\n    <Container>\n      <Title>{title}</Title>\n      {children}\n    </Container>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n","import { useState } from \"react\";\nimport { FeedbackSection } from \"./App.styled\";\nimport { FeedbackOptions } from \"./components/FeedbackOptions/FeedbackOptions\";\nimport { Notification } from \"./components/Notification/Notification\";\nimport { Statistics } from \"./components/Statistics/Statistics\";\nimport { Section } from \"./components/Section/Section\";\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const btns = { bad, neutral, good };\n\n  const increment = (name) => {\n    switch (name) {\n      case \"good\":\n        setGood((ps) => ps + 1);\n        break;\n      case \"bad\":\n        setBad((ps) => ps + 1);\n        break;\n      case \"neutral\":\n        setNeutral((ps) => ps + 1);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + bad + neutral;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    const total = countTotalFeedback();\n    return Math.round((good * 100) / total);\n  };\n\n  return (\n    <FeedbackSection>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={Object.keys(btns)}\n          onLeaveFeedback={increment}\n        ></FeedbackOptions>\n      </Section>\n      <Section title=\"Statistics\">\n        {countTotalFeedback() ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback()}\n            positivePercentage={countPositiveFeedbackPercentage()}\n          ></Statistics>\n        ) : (\n          <Notification message=\"No feedback given\"></Notification>\n        )}\n      </Section>\n    </FeedbackSection>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Feedback from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Feedback />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}